"use strict";
// TODO: support non ascii
function isSpace(char) {
    return /^\s$/.test(char);
}
function isIdentStart(char) {
    return /^[a-zA-Z_]$/.test(char);
}
function isIdent(char) {
    return /^[0-9a-zA-Z_]$/.test(char);
}
function isReservedSymbol(char) {
    return ['"', "'", '(', ')', '{', '}', '[', ']', '#'].includes(char);
}
function isSymbol(char) {
    if (isReservedSymbol(char) || (char == '_')) {
        return false;
    }
    ;
    return /^[\u0021-\u002F\u003A-\u0040\u005B-\u0060\u007B-\u007E]$/.test(char);
}
function isNumberStart(char) {
    return /^[0-9]$/.test(char);
}
function isNumber(char) {
    return /^[0-9_]$/.test(char);
}
class Lexer {
    constructor(byChar) {
        this.lastChar = null;
        this.lastToken = null;
        this.finished = false;
        this.chars = byChar[Symbol.iterator]();
    }
    nextChar() {
        if (this.lastChar && this.lastChar.use) {
            this.lastChar.use = false;
            return this.lastChar.char;
        }
        ;
        let { done, value: char } = this.chars.next();
        if (done) {
            return null;
        }
        ;
        this.lastChar = { char, use: false };
        return char;
    }
    ;
    unreadChar() {
        if (!this.lastChar || this.lastChar.use) {
            throw "internal error";
        }
        ;
        this.lastChar.use = true;
    }
    ;
    takeWhile(predicate) {
        let str = "";
        while (true) {
            let char = this.nextChar();
            if (!char) {
                return str;
            }
            if (!predicate(char)) {
                this.unreadChar();
                return str;
            }
            ;
            str += char;
        }
        ;
    }
    ;
    nextToken() {
        if (this.lastToken && this.lastToken.use) {
            this.lastToken.use = false;
            return this.lastToken.token;
        }
        ;
        let char = this.nextChar();
        if (!char) {
            if (!this.finished) {
                this.finished = true;
                return { kind: "eol" };
            }
            ;
            return null;
        }
        ;
        if (isSpace(char)) {
            if (char == '\n') {
                return { kind: "eol" };
            }
            ;
            while (true) {
                char = this.nextChar();
                if (!char) {
                    return { kind: "eol" };
                }
                ;
                if (!isSpace(char)) {
                    break;
                }
                ;
                if (char == '\n') {
                    return { kind: "eol" };
                }
                ;
            }
            ;
        }
        ;
        if (isReservedSymbol(char)) {
            throw "impl";
        }
        else if (isIdentStart(char)) {
            this.unreadChar();
            return { kind: "ref", value: this.takeWhile(isIdent) };
        }
        else if (isNumberStart(char)) {
            throw "impl";
        }
        else if (isSymbol(char)) {
            throw "impl";
        }
        else {
            // TODO: quote char when necessary
            throw new Error("unknown character ${char}");
        }
        ;
    }
    ;
    [Symbol.iterator]() {
        return new TokenIterator(this);
    }
    ;
}
;
class TokenIterator {
    constructor(lexer) {
        this.lexer = lexer;
    }
    ;
    next() {
        let token = this.lexer.nextToken();
        if (!token) {
            // the type of Iterator requires that we always return a valid Token
            // so we return eol here
            return { done: true, value: { kind: "eol" } };
        }
        ;
        return { done: false, value: token };
    }
    ;
}
;
let lexer = new Lexer("hello world bitch");
for (let ch of lexer) {
    console.log(ch);
}
;
//# sourceMappingURL=data:application/json;base64,